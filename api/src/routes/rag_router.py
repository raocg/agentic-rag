from fastapi import APIRouter, HTTPException, Depends
from models.schemas import RAGQueryRequest, RAGQueryResponse, SearchRequest, SearchResponse
from services.rag_service import RAGService
from services.vectorstore_service import VectorStoreService
from services.claude_service import ClaudeService

router = APIRouter()

def get_rag_service():
    """Dependency to get RAG service instance"""
    vectorstore = VectorStoreService()
    claude = ClaudeService()
    return RAGService(vectorstore, claude)

@router.post("/query", response_model=RAGQueryResponse)
async def query_rag(
    request: RAGQueryRequest,
    rag_service: RAGService = Depends(get_rag_service)
):
    """
    Query the RAG system with a question.
    Returns an answer generated by Claude with context from the knowledge base.
    """
    try:
        response = await rag_service.query(
            query=request.query,
            knowledge_base_id=request.knowledge_base_id,
            top_k=request.top_k,
            model=request.model,
            temperature=request.temperature,
            include_sources=request.include_sources
        )
        return response
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/search", response_model=SearchResponse)
async def search_documents(
    request: SearchRequest,
    rag_service: RAGService = Depends(get_rag_service)
):
    """
    Search for documents in the knowledge base without generation.
    Returns only the relevant documents.
    """
    try:
        results = await rag_service.search(
            query=request.query,
            knowledge_base_id=request.knowledge_base_id,
            top_k=request.top_k,
            filter=request.filter
        )
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/knowledge-bases")
async def list_knowledge_bases(
    rag_service: RAGService = Depends(get_rag_service)
):
    """List all available knowledge bases"""
    try:
        knowledge_bases = await rag_service.list_knowledge_bases()
        return {"knowledge_bases": knowledge_bases}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
